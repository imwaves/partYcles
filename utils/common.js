export function checkEdges(c,n,t,e=0){const{pos:o,vel:r}=c;o.x-e>=n?(o.x=n+e,r.x*=-1):o.x+e<0&&(r.x*=-1,o.x=0-e),o.y-e>=t?(r.y*=-1,o.y=t+e):o.y+e<0&&(r.y*=-1,o.y=0-e)}export function checkEdgesMirror(c,n,t){const{pos:e,vel:o}=c;e.x>n?e.x=0:e.x<0&&(e.x=n),e.y>t?e.y=0:e.y<0&&(e.y=t)}export function sendWorker(c,n){this.postMessage({cmd:c,data:n})}let a=1;export function askWorker(c,n){const t=a++;return new Promise(e=>{function o({data:r}){if(r.cmd===c){if(!r.cmdId||r.cmdId<t)return;r.cmdId===t&&e(r.data)}this.removeEventListener("message",o)}this.addEventListener("message",o),this.postMessage({cmd:c,data:n,cmdId:t})})}export function descriptForWorker(c,n,t,e,o=t[e],r){const s="_"+e;t[s]=o,Object.defineProperty(t,e,{get(){return t[s]},set(i){return t[s]=i,r?.(i,e),sendWorker.call(c,"params",{[e]:i})}})}export function record(c,{time:n,onstop:t=download}={}){var e=[],o=c.captureStream(60);const r=new MediaRecorder(o,{mimeType:"video/webm; codecs=h264",videoBitsPerSecond:2e7});return r.start(n),r.ondataavailable=function(s){e.push(event.data),r.state==="recording"&&r.stop()},r.onstop=function(s){t(new Blob(e,{type:"video/webm"}))},r}export function download(c){var n=URL.createObjectURL(c);const t=document.createElement("a");t.href=n,t.setAttribute("download","yeah-"+Date.now().toString()),t.click()}
